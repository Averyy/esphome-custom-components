esphome:
    name: radial-hall-effect-sensor
    friendly_name: Radial Hall Effect Sensor

esp32:
    board: esp32dev

external_components:
    - source: components

logger:
    level: DEBUG

uart:
    id: uart_notecard
    tx_pin: GPIO17
    rx_pin: GPIO16
    baud_rate: 9600

i2c:
    sda: GPIO21
    scl: GPIO22
    scan: true

as5600:
    direction: counterclockwise # if DIR Soldered directly to 3.3V (for counterclockwise) then this is not needed. For normal clockwise it should be soldered to GND.
    dir_pin: GPIO4
    id: my_as5600
    power_mode: low3

sensor:
    - platform: as5600
      as5600_id: my_as5600
      name: "Angle"
      update_interval: 1s
      id: position
      filters:
          - lambda: "return x * 360.0 / 4096.0;"
          - median:
                window_size: 10
                send_every: 10
                send_first_at: 10
      on_value:
          then:
              - lambda: |-
                    // Get temp and battery voltage from Notecard, returns 0 if not available
                    float temperature = id(notecard_component).get_notecard_temperature();
                    float battery_voltage = id(notecard_component).get_notecard_battery_voltage();

                    // Create JSON with all values
                    std::string json = "{";
                    json += "\"angle\":" + to_string(x);
                    // Only include temperature if it's a non-zero value
                    if (temperature != 0.0) {
                        json += ",\"temperature\":" + to_string(temperature);
                    }
                    // Only include battery voltage if it's a non-zero value
                    if (battery_voltage != 0.0) {
                        json += ",\"batteryVoltage\":" + to_string(battery_voltage);
                    }
                    json += "}";

                    ESP_LOGD("main", "Raw json: %s", json.c_str());

                    // Send data to Notecard
                    bool success = id(notecard_component).send_data(json);
                    ESP_LOGD("main", "Data send %s", success ? "successful" : "failed");

                    // Optional: Trigger immediate sync with the Notehub
                    bool sync_success = id(notecard_component).sync_now();
                    ESP_LOGD("main", "Sync trigger %s", sync_success ? "successful" : "failed");

                    // Give time for Notecard communication to complete
                    ESP_LOGD("main", "Going to sleep in 2s...");
                    delay(2000);
              - deep_sleep.enter: deep_sleep_mode

# Notecard configuration sample
# notecard:
#     id: notecard_component
#     uart_id: uart_notecard
#     project_id: "your-project.devices"
#     org: "Your Organization"
#     sync_interval: 6h

# Notecard configuration real (using secrets)
notecard:
    id: notecard_component
    uart_id: uart_notecard
    project_id: !secret notecard_project_id
    sync_interval: 48h #high because of manual sync trigger
    org: !secret notecard_org

# Deep sleep configuration
deep_sleep:
    id: deep_sleep_mode
    run_duration: 5min #this will cause the device to goto sleep if something stalls or fails
    sleep_duration: 8h
